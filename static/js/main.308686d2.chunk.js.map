{"version":3,"sources":["components/TextualScoreForm/TextualScoreForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["emptyTextualScore","id","questions","answers","scores","text","keys","TextualScoreForm","existingTextualScore","textualScore","onSave","useState","undefined","TextualScore","setTextualScore","useEffect","map","value","index","type","name","onChange","e","v","i","target","onClick","App","textualScores","sort","Math","random","constructedScores","setTextualScores","displayTextualScores","setDisplayTextualScores","textualScoreToProcess","setNewTextualScore","className","nextIndex","findIndex","length","getNext","newTextualScore","forEach","score","scoreToConstruct","key","replace","console","log","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.308686d2.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {TextualScore} from \"../../types\";\n\ninterface Props {\n    onSave(TextualScore: TextualScore): void;\n\n    textualScore?: TextualScore;\n}\n\nconst emptyTextualScore: TextualScore = {\n    id: 999999,\n    questions: [\n        \"What is the first sound that comes to your mind?\",\n        \"What object did you used today when you woke up?\",\n        \"Choose the best word to describe the sound environment surrounding you right now: \\n - Almost silent - Quiet - Intense - Loud - Crazy\",\n        \"How long can you clap after a show that you liked?\"\n    ], answers: [\n        \"\",\n        \"\",\n        \"\",\n        \"\"\n    ], scores: [\n        {text: \"Imitate the ______ by tapping with a ______ in a ______ way.\", keys: [1, 2, 3]},\n        {\n            text: \"Reproduce the sound of ______ by scratching against a ______ in a ______ manner during ______ .\",\n            keys: [1, 2, 3, 4]\n        }\n    ]\n};\n\nexport const TextualScoreForm = ({textualScore: existingTextualScore, onSave}: Props) => {\n\n    const [TextualScore, setTextualScore] = useState<TextualScore>(\n        existingTextualScore !== undefined ? existingTextualScore : emptyTextualScore\n    );\n\n    useEffect(() => {\n        //Action\n        if (existingTextualScore !== undefined) setTextualScore(existingTextualScore);\n    }, [existingTextualScore]);\n\n    const handleClick = () => {\n        onSave(TextualScore);\n    };\n    return (\n\n        <div>\n\n            {TextualScore.questions.map((value: string, index: number) => (\n                <div key={index}>\n                    <p>{value}</p>\n                    <input\n                        type=\"text\"\n                        name=\"firstName\"\n                        value={TextualScore.answers[index]}\n                        onChange={(e) => setTextualScore({\n                            ...TextualScore, scores: TextualScore.scores, answers: TextualScore.answers.map((v, i) => {\n                                if (i === index) {\n                                    return e.target.value;\n                                } else {\n                                    return v;\n                                }\n                            }) as string[]\n                        })}\n                    />\n                </div>))}\n\n            <button type=\"button\" onClick={handleClick}>\n                Generate scores\n            </button>\n        </div>\n    );\n};\n","import React, {useState} from \"react\";\nimport \"./App.css\";\n\nimport {TextualScore} from \"./types\";\nimport {TextualScoreForm} from \"./components/TextualScoreForm\"\n\nfunction App() {\n\n    const textualScores: Array<TextualScore> = [\n        {\n            id: 0,\n            questions: [\n                \"What is the first sound that comes to your mind?\",\n                \"What object did you used today when you woke up?\",\n                \"Choose the best word to describe the sound environment surrounding you right now: \\n - Almost silent - Quiet - Intense - Loud - Crazy\",\n                \"How long can you clap after a show that you liked?\"\n            ], answers: [\n                \"\",\n                \"\",\n                \"\",\n                \"\"\n            ], scores: [\n                {\n                    text: \"Imitate the ______ by tapping with a ______ in a ______ way.\",\n                    keys: [1, 2, 3]\n                },\n                {\n                    text: \"Reproduce the sound of ______ by scratching against a ______ in a ______ manner during ______ .\",\n                    keys: [1, 2, 3, 4]\n                }\n            ]\n        },\n        {\n            id: 1,\n            questions: [\n                \"Select a physical element of the building, apartment, house, street or road you are in or nearby and write it down.\",\n                \"Which one of this verbs describe best the way the music you listen the most affects you? \\n - Hit - Caress - Strum - Crash\",\n                \"If you had access to a really powerful long distance microphone and recorder, what would you record?\",\n                \"How many times have you heard water running or dropping today?\"\n            ], answers: [\n                \"\",\n                \"\",\n                \"\",\n                \"\"\n            ], scores: [\n                {\n                    text: \"______ the closest ______ to make it sound like ______ \",\n                    keys: [2, 1, 3]\n                },\n                {\n                    text: \"Slowly tap a ______ 10 times, then ______ it one time and then yell ______ against it ______ times.\",\n                    keys: [1, 2, 3, 4]\n                }\n            ]\n        },\n        {\n            id: 2,\n            questions: [\n                \"Think about a horrible object made of plastic and write it down.\",\n                \"What is the last object or human generated sound that you have heard before going to bed yesterday?\",\n                \"How many times can you whistle in a minute?\",\n                \"What would you like to throw in a lake (theoretically because a lot of objects can pollute it) to listen to the impact on the surface?\"\n            ], answers: [\n                \"\",\n                \"\",\n                \"\",\n                \"\"\n            ], scores: [\n                {\n                    text: \"First, listen closely during ______ seconds, then tap ______ against ______ to produce a ______ during ______ more seconds.\",\n                    keys: [3, 4, 1, 2, 3]\n                },\n                {\n                    text: \"Whistle twice. Tap your fingers against a ______ three times. Whistle again ______ times. Use a ______ to scratch your hairs as long as you want. Repeat.\",\n                    keys: [1, 3, 4]\n                }\n            ]\n        },\n        {\n            id: 3,\n            questions: [\n                \"How would you like car horns to sound like? \\n - Funny - Weird - Scary - Soothing\",\n                \"Which one of this sound is the scariest to you: singing, whispering, murmuring, wailing, moaning, bleating, or crying?\",\n                \"What is your ricochet personal record?\",\n                \"What is your favorite motor produced sound?\"\n            ], answers: [\n                \"\",\n                \"\",\n                \"\",\n                \"\"\n            ], scores: [\n                {\n                    text: \"Tap ______ times on your chest or knees during ______ second. Repeat this ______ times. Then imitate a ______. It as to be ______ and you have to make it while ______. Do it as long as you want.\",\n                    keys: [3, 3, 3, 4, 1, 2]\n                },\n                {\n                    text: \"Speak with an imaginary person in a ______ way. Start ______ a regular rhythm with a vowel of your choice during 20 seconds. Stop for ______ seconds and repeat the all process ______ times.\",\n                    keys: [1, 2, 3, 3]\n                }\n            ]\n        }\n    ].sort(() => Math.random() - 0.5);\n\n    const [constructedScores, setTextualScores] = useState<Array<String>>([]);\n    const [displayTextualScores, setDisplayTextualScores] = useState<Boolean>(false);\n\n    function getNext() : TextualScore{\n        let nextIndex = textualScores.findIndex(textualScore => textualScore.id === textualScoreToProcess.id) + 1;\n        return nextIndex < textualScores.length ? textualScores[nextIndex] : textualScores[0];\n    }\n\n    const [textualScoreToProcess, setNewTextualScore] = useState<TextualScore>(textualScores[0]);\n\n    const handleSave = (newTextualScore: TextualScore) => {\n\n        let scores: Array<String> = [];\n\n        newTextualScore.scores.forEach((score) => {\n\n            let scoreToConstruct: string = score.text;\n            let keys: Array<number> = score.keys;\n\n            keys.forEach((key) => {\n                scoreToConstruct = scoreToConstruct.replace('______', newTextualScore.answers[key - 1]);\n            });\n\n            console.log(scoreToConstruct);\n            scores.push(scoreToConstruct);\n        });\n\n        // setTextualScores(constructedScores => [...constructedScores, ...scores]); to keep the previous ones\n        setTextualScores(scores);\n        setDisplayTextualScores(true);\n    };\n\n    function handleClick() {\n        setNewTextualScore(getNext());\n        setDisplayTextualScores(false);\n    }\n\n    if (!displayTextualScores) {\n        return (\n            <div className=\"App\">\n                <h1>Sonic Projections</h1>\n                <TextualScoreForm textualScore={textualScoreToProcess} onSave={handleSave}/>\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"App\">\n                <h1>Sonic Projections</h1>\n                {\n                    constructedScores.map((value, index: number) => (\n                        <div key={index}>\n                            <p>{value}</p>\n                        </div>))\n                }\n                <button type=\"button\" onClick={handleClick}>\n                    Do it again\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}